function [state, shock, relations] = oblique_shock(state, shock, fluid)
%normal_shock - Determines the properties after a normal shock
%
%   Input:
%       state -- Structure that describes the state of the flow, the
%                structure must consist of the following fields:
%           mach -- Mach number of the flow
%           pressure -- Static pressure of the flow (abs not gauge)
%           temp -- Static temperature of the flow (units of K or R)
%           rho -- Static density of the flow
%
%       shock -- Structure that describes conditions of the shock, the
%                structure must consist of the following fields:
%           machNorm -- The component of the velocity that is normal to the
%                       shock
%           beta -- The angle of the weak shock wave
%           theta -- The angle of the flow after the shock
%
%       fluid -- Structure that describes the properties of the fluid, the
%                structure must consist of the following fields:
%           gam -- Heat capacity ratio; for air as ideal gas, gamma = 1.4
%           R -- Ideal gas constant: for dry air, R = 289 J/kgK
%
%   Output:
%       state -- The function does not add any fields to 'state' but adds
%                terms to the existing fields. These terms represent the
%                state of the flow after the shock occurs.
%       shock -- The normal component of the flow in relation to the shock 
%                wave after the shock occurs is calculated
%       relations -- A structure consisting of the relations between the
%                    conditions before and after the shock
%
% Author: Jason Ryan
% Date: 12/06/13
% Last Revised: 12/15/12
%
% Modifications: Daniel Waggner
% Date: 05/05/23
% (For Academic Use Only)
%
%% Initialize variables
first = 1;
second = 2;
mach1 = state.mach(first) * sind(shock.beta);
gam = fluid.gam;
R = fluid.R;
cp = R / (1 - 1/gam);
%% Create commonly used terms
term1 = (gam + 1)*mach1^2 / (2 + (gam - 1)*mach1^2);
term2 = 1 + 2*gam*(mach1^2 - 1) / (gam + 1);
entropyDiff = cp * log(term2 / term1) - R * log(term2);
%% Calculate the conditions after shock occurs
shock.machNorm(second) = sqrt((1 + ((gam - 1)/2)*mach1^2) / (gam*mach1^2 - (gam - 1)/2));
state.rho(second) = term1 * state.rho(first);
state.pressure(second) = term2 * state.pressure(first);
state.temp(second) = term2 / term1 * state.temp(first);
% Corrects the normal component of mach number to actual mach number if the
% shock is oblique (state.mach(second) = shock.machNorm(second) if beta =
% 90 and theta = 0 AKA normal shock conditions)
state.mach(second) = shock.machNorm(second) / sind(shock.beta - shock.theta);
%% Stagnation Pressure
term3 = (2*gam*(state.mach(second))^2-(gam-1)) / (gam+1);
state.stagPressure(second) = state.pressure(second) / term

%% Create relations structure
relations.shock.pressure = term2;
relations.shock.temp = term2 / term1;
relations.shock.rho = term1;
relations.shock.stagPress = exp(-entropyDiff/R);
end